# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: sftpgo
#   namespace: default
# spec:
#   replicas: 1
#   selector:
#     matchLabels:
#       app: sftpgo
#   strategy:
#     rollingUpdate: null
#     type: Recreate
#   template:
#     metadata:
#       labels:
#         app: sftpgo
#     spec:
#       containers:
#         - name: sftpgo
#           image: drakkan/sftpgo:v2.6.4 # {"$imagepolicy": "flux-system:sftpgo"}
#           imagePullPolicy: IfNotPresent
#           ports:
#             - name: http
#               containerPort: 8080
#             - name: ssh
#               containerPort: 2022
#             - name: ftp
#               containerPort: 2121
#             - name: webdav
#               containerPort: 10080
#           env:
#             - name: TZ
#               value: America/Toronto
#             - name: SFTPGO_WEBDAVD__BINDINGS__0__PORT
#               value: "10080"
#           volumeMounts:
#             - name: sftpgodata
#               mountPath: /srv/sftpgo/data
#             - name: sftpgohome
#               mountPath: /var/lib/sftpgo
#       volumes:
#         - name: sftpgodata
#           persistentVolumeClaim:
#             claimName: uploads-pvc
#         - name: sftpgohome
#           persistentVolumeClaim:
#             claimName: sftpgo-config-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: sftpgo-httpdav
  namespace: default
  labels:
    app: sftpgo
spec:
  strategy:
    rollingUpdate: null
    type: Recreate
  selector:
    app: sftpgo
  ports:
  - name: sftpgo-http
    port: 8080
    targetPort: 8080
  - name: webdav
    port: 10080
    targetPort: 10080
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: sftpgo-ingress
  namespace: default
  annotations:
    #kubernetes.io/tls-acme: "true"
    # type of authentication
    #nginx.ingress.kubernetes.io/auth-type: basic
    # prevent the controller from redirecting (308) to HTTPS
    nginx.ingress.kubernetes.io/ssl-redirect: 'false'
    # name of the secret that contains the user/password definitions
    #nginx.ingress.kubernetes.io/auth-secret: nginx-secret
    # message to display with an appropriate context why the authentication is required
    #nginx.ingress.kubernetes.io/auth-realm: 'Authentication Required '
    # custom max body size for file uploading like backing image uploading
    nginx.ingress.kubernetes.io/proxy-body-size: 10000m
spec:
  ingressClassName: internal-nginx
  rules:
  - host: sftpgo.tallflix.ca
    http:
      paths:
      - pathType: Prefix
        path: "/"
        backend:
          service:
            name: sftpgo-httpdav
            port:
              number: 8080
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: sftpgo-webdav-ingress
  namespace: default
  annotations:
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    #nginx.ingress.kubernetes.io/proxy-body-size: "0"
    # custom max body size for file uploading like backing image uploading
    nginx.ingress.kubernetes.io/proxy-body-size: 10000m
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - "webdav.tallflix.ca"
    secretName: webdav-tls-secret
  rules:
  - host: "webdav.tallflix.ca"
    http:
      paths:
      - pathType: Prefix
        path: "/"
        backend:
          service:
            name: sftpgo-httpdav
            port:
              number: 10080
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: uploads-pv
spec:
  storageClassName: syno-nfs
  capacity:
    storage: 17Ti
  accessModes:
    - ReadWriteMany
  persistentVolumeReclaimPolicy: Retain
  mountOptions:
    - hard
    - nfsvers=4
  nfs:
    server: 10.10.10.110
    path: "/volume1/uploads"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: uploads-pvc
  namespace: default
spec:
  accessModes:
    - ReadWriteMany
  storageClassName: syno-nfs
  volumeName: uploads-pv
  resources:
    requests:
      storage: 8Gi
